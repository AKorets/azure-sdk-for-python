# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError

from .. import models


class PremiumCheckOperations(object):
    """PremiumCheckOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The version of the API to be used with the client request. Constant value: "2014-01-01".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2014-01-01"

        self.config = config

    def get_services_premium_check(
            self, filter=None, service_type=None, skip_count=None, take_count=None, custom_headers=None, raw=False, **operation_config):
        """Gets the details of services for a tenant having Azure AD Premium
        license and is onboarded to Azure Active Directory Connect Health.

        :param filter: The service property filter to apply.
        :type filter: str
        :param service_type: The service type for the services onboarded to
         Azure Active Directory Connect Health. Depending on whether the
         service is monitoring, ADFS, Sync or ADDS roles, the service type can
         either be AdFederationService or AadSyncService or AdDomainService.
        :type service_type: str
        :param skip_count: The skip count, which specifies the number of
         elements that can be bypassed from a sequence and then return the
         remaining elements.
        :type skip_count: int
        :param take_count: The take count , which specifies the number of
         elements that can be returned from a sequence.
        :type take_count: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Services or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.adhybridhealthservice.models.Services or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_services_premium_check.metadata['url']

        # Construct parameters
        query_parameters = {}
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if service_type is not None:
            query_parameters['serviceType'] = self._serialize.query("service_type", service_type, 'str')
        if skip_count is not None:
            query_parameters['skipCount'] = self._serialize.query("skip_count", skip_count, 'int')
        if take_count is not None:
            query_parameters['takeCount'] = self._serialize.query("take_count", take_count, 'int')
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Services', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_services_premium_check.metadata = {'url': '/providers/Microsoft.ADHybridHealthService/services/premiumCheck'}
