# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from .operations.addsservices_operations import AddsservicesOperations
from .operations.alerts_operations import AlertsOperations
from .operations.addsservicemembers_operations import AddsservicemembersOperations
from .operations.addomainservicemembers_operations import AddomainservicemembersOperations
from .operations.forestsummary_operations import ForestsummaryOperations
from .operations.metrics_operations import MetricsOperations
from .operations.metricmetadata_operations import MetricmetadataOperations
from .operations.replicationstatus_operations import ReplicationstatusOperations
from .operations.replicationsummary_operations import ReplicationsummaryOperations
from .operations.operations import Operations
from .operations.configuration_operations import ConfigurationOperations
from .operations.services_operations import ServicesOperations
from .operations.premium_check_operations import PremiumCheckOperations
from .operations.feedback_operations import FeedbackOperations
from . import models


class ADHybridHealthServiceConfiguration(AzureConfiguration):
    """Configuration for ADHybridHealthService
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://management.azure.com'

        super(ADHybridHealthServiceConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-adhybridhealthservice/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials


class ADHybridHealthService(SDKClient):
    """REST APIs for Azure Active Drectory Connect Health

    :ivar config: Configuration for client.
    :vartype config: ADHybridHealthServiceConfiguration

    :ivar addsservices: Addsservices operations
    :vartype addsservices: azure.mgmt.adhybridhealthservice.operations.AddsservicesOperations
    :ivar alerts: Alerts operations
    :vartype alerts: azure.mgmt.adhybridhealthservice.operations.AlertsOperations
    :ivar addsservicemembers: Addsservicemembers operations
    :vartype addsservicemembers: azure.mgmt.adhybridhealthservice.operations.AddsservicemembersOperations
    :ivar addomainservicemembers: Addomainservicemembers operations
    :vartype addomainservicemembers: azure.mgmt.adhybridhealthservice.operations.AddomainservicemembersOperations
    :ivar forestsummary: Forestsummary operations
    :vartype forestsummary: azure.mgmt.adhybridhealthservice.operations.ForestsummaryOperations
    :ivar metrics: Metrics operations
    :vartype metrics: azure.mgmt.adhybridhealthservice.operations.MetricsOperations
    :ivar metricmetadata: Metricmetadata operations
    :vartype metricmetadata: azure.mgmt.adhybridhealthservice.operations.MetricmetadataOperations
    :ivar replicationstatus: Replicationstatus operations
    :vartype replicationstatus: azure.mgmt.adhybridhealthservice.operations.ReplicationstatusOperations
    :ivar replicationsummary: Replicationsummary operations
    :vartype replicationsummary: azure.mgmt.adhybridhealthservice.operations.ReplicationsummaryOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.adhybridhealthservice.operations.Operations
    :ivar configuration: Configuration operations
    :vartype configuration: azure.mgmt.adhybridhealthservice.operations.ConfigurationOperations
    :ivar services: Services operations
    :vartype services: azure.mgmt.adhybridhealthservice.operations.ServicesOperations
    :ivar premium_check: PremiumCheck operations
    :vartype premium_check: azure.mgmt.adhybridhealthservice.operations.PremiumCheckOperations
    :ivar feedback: Feedback operations
    :vartype feedback: azure.mgmt.adhybridhealthservice.operations.FeedbackOperations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = ADHybridHealthServiceConfiguration(credentials, base_url)
        super(ADHybridHealthService, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2014-01-01'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.addsservices = AddsservicesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.alerts = AlertsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.addsservicemembers = AddsservicemembersOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.addomainservicemembers = AddomainservicemembersOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.forestsummary = ForestsummaryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.metrics = MetricsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.metricmetadata = MetricmetadataOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.replicationstatus = ReplicationstatusOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.replicationsummary = ReplicationsummaryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self.config, self._serialize, self._deserialize)
        self.configuration = ConfigurationOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.services = ServicesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.premium_check = PremiumCheckOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.feedback = FeedbackOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def services_get_bad_pwd_user_report(
            self, service_name, data_source=None, custom_headers=None, raw=False, **operation_config):
        """Gets the bad password login attempt report for an user.

        :param service_name: The name of the service.
        :type service_name: str
        :param data_source: The source of data, if its test data or customer
         data.
        :type data_source: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ErrorReportUsersEntries or ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.adhybridhealthservice.models.ErrorReportUsersEntries or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.services_get_bad_pwd_user_report.metadata['url']
        path_format_arguments = {
            'serviceName': self._serialize.url("service_name", service_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if data_source is not None:
            query_parameters['dataSource'] = self._serialize.query("data_source", data_source, 'str')
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ErrorReportUsersEntries', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    services_get_bad_pwd_user_report.metadata = {'url': '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/reports/badpassword/details/user'}
